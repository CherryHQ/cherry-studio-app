name: EAS Build and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    name: Build with EAS and Create Release
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'

      # Step 3: Setup Expo and EAS
      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      # Step 4: Install dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Step 5: Get version tag
      - name: Get version tag
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      # Step 6: Build Android (without auto-submit)
      - name: Build Android on EAS
        id: build_android
        run: |
          echo "Building Android APK..."
          eas build --platform android --profile production --non-interactive --no-wait --json > android_build.json
          BUILD_ID=$(cat android_build.json | jq -r '.[0].id')
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "Android Build ID: $BUILD_ID"

      # Step 7: Build iOS (with auto-submit)
      - name: Build and Submit iOS on EAS
        id: build_ios
        run: |
          echo "Building and submitting iOS..."
          eas build --platform ios --profile production --auto-submit --non-interactive --no-wait --json > ios_build.json
          BUILD_ID=$(cat ios_build.json | jq -r '.[0].id')
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "iOS Build ID: $BUILD_ID (will auto-submit to App Store Connect)"

      # Step 8: Wait for Android build to complete
      - name: Wait for Android build
        run: |
          echo "Waiting for Android build to complete..."
          BUILD_ID="${{ steps.build_android.outputs.build_id }}"

          # Poll build status until complete
          while true; do
            STATUS=$(eas build:view $BUILD_ID --json | jq -r '.status')
            echo "Current status: $STATUS"

            if [ "$STATUS" == "finished" ]; then
              echo "Build completed successfully!"
              break
            elif [ "$STATUS" == "errored" ] || [ "$STATUS" == "canceled" ]; then
              echo "Build failed with status: $STATUS"
              exit 1
            fi

            echo "Build still in progress, waiting 60 seconds..."
            sleep 60
          done

      # Step 9: Download Android APK
      - name: Download Android APK
        run: |
          BUILD_ID="${{ steps.build_android.outputs.build_id }}"
          echo "Downloading APK from build: $BUILD_ID"

          # Get artifact URL
          ARTIFACT_URL=$(eas build:view $BUILD_ID --json | jq -r '.artifacts.buildUrl')
          echo "Artifact URL: $ARTIFACT_URL"

          # Download APK
          curl -L -o cherry-studio-${{ steps.version.outputs.tag }}.apk "$ARTIFACT_URL"

          # Verify file exists and size
          ls -lh cherry-studio-${{ steps.version.outputs.tag }}.apk

      # Step 10: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Cherry Studio ${{ steps.version.outputs.tag }}
          body: |
            ## Cherry Studio ${{ steps.version.outputs.tag }}

            ### Android
            - Built with EAS Build (production profile)
            - APK available for download below

            ### iOS
            - Built with EAS Build (production profile)
            - Automatically submitted to App Store Connect

            ### Build Information
            - Android Build ID: `${{ steps.build_android.outputs.build_id }}`
            - iOS Build ID: `${{ steps.build_ios.outputs.build_id }}`

            ---
            ðŸ¤– Automatically generated by GitHub Actions
          files: |
            cherry-studio-${{ steps.version.outputs.tag }}.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 11: Summary
      - name: Build Summary
        run: |
          echo "## Build Complete! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Android" >> $GITHUB_STEP_SUMMARY
          echo "- Build ID: \`${{ steps.build_android.outputs.build_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Status: âœ… APK uploaded to GitHub Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### iOS" >> $GITHUB_STEP_SUMMARY
          echo "- Build ID: \`${{ steps.build_ios.outputs.build_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ðŸš€ Submitted to App Store Connect" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: \`${{ steps.version.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ steps.create_release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
